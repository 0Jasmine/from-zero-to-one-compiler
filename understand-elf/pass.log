*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = './understand-elf/matmul-v2-O0.ll'
source_filename = "./understand-elf/matmul-v2.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull i8* @_Znam(i64 noundef) #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @printf(i8* noundef, ...) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8* noundef) #4

attributes #0 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { builtin allocsize(0) }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = './understand-elf/matmul-v2-O0.ll'
source_filename = "./understand-elf/matmul-v2.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull i8* @_Znam(i64 noundef) #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @printf(i8* noundef, ...) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8* noundef) #4

attributes #0 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { builtin allocsize(0) }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

; Loop:
22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

; Loop:
22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

; Loop:
22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

; Loop:
22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

; Exit blocks
69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000000) #5
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 4000000, i1 false)
  store i32* %7, i32** %2, align 8
  %9 = call noalias noundef nonnull i8* @_Znam(i64 noundef 4000) #5
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 4000, i1 false)
  store i32* %10, i32** %3, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %66, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 1000
  br i1 %14, label %15, label %69

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = srem i32 %16, 13
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  store i32 %17, i32* %21, align 4
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %61, %15
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 1000
  br i1 %24, label %25, label %64

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %26, %27
  %29 = srem i32 %28, 20
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  store i32 %29, i32* %33, align 4
  %34 = load i32*, i32** %3, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %38, %43
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* %4, align 4
  %47 = mul nsw i32 %46, 1000
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %45, i64 %50
  store i32 %44, i32* %51, align 4
  %52 = load i32*, i32** %2, align 8
  %53 = load i32, i32* %4, align 4
  %54 = mul nsw i32 %53, 1000
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %52, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %59)
  br label %61

61:                                               ; preds = %25
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %22, !llvm.loop !6

64:                                               ; preds = %22
  %65 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %4, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %4, align 4
  br label %12, !llvm.loop !8

69:                                               ; preds = %12
  %70 = load i32*, i32** %2, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  call void @_ZdaPv(i8* noundef %73) #6
  br label %74

74:                                               ; preds = %72, %69
  %75 = load i32*, i32** %3, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %75 to i8*
  call void @_ZdaPv(i8* noundef %78) #6
  br label %79

79:                                               ; preds = %77, %74
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %18:gr64 = MOV32ri64 4000000
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %18:gr64
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %19:gr64 = COPY $rax
128B	  %17:gr64 = COPY %19:gr64
144B	  %15:gr64 = COPY %17:gr64
160B	  %13:gr32 = MOV32r0 implicit-def $eflags
176B	  %14:gr64 = MOV32ri64 4000000
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = COPY %13:gr32
240B	  $rdx = COPY %14:gr64
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
304B	  %9:gr64 = MOV32ri64 4000
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %9:gr64
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %10:gr64 = COPY $rax
400B	  %8:gr64 = COPY %10:gr64
416B	  %6:gr64 = COPY %8:gr64
432B	  %4:gr32 = MOV32r0 implicit-def $eflags
448B	  %5:gr64 = MOV32ri64 4000
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = COPY %4:gr32
512B	  $rdx = COPY %5:gr64
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
736B	  %37:gr32 = COPY $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
896B	  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
912B	  %93:gr32 = MOV32ri 20
928B	  $eax = COPY %97:gr32
944B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
960B	  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
976B	  %94:gr32 = COPY $edx
992B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1008B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1024B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1040B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1056B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1072B	  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1088B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1104B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1120B	  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
1136B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1152B	  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
1168B	  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
1184B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1200B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1216B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1232B	  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
1248B	  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
1264B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1280B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1296B	  %46:gr64 = MOV64ri @.str
1312B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $rdi = COPY %46:gr64
1344B	  $esi = COPY %51:gr32
1360B	  $al = MOV8ri 0
1376B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  %48:gr32 = COPY $eax

1424B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1440B	  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1456B	  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
1472B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1488B	  JMP_1 %bb.3

1504B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1520B	  %40:gr64 = MOV64ri @.str.1
1536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  $rdi = COPY %40:gr64
1568B	  $al = MOV8ri 0
1584B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1600B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  %41:gr32 = COPY $eax

1632B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1648B	  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1664B	  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
1680B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1696B	  JMP_1 %bb.1

1712B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1728B	  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1744B	  CMP64ri8 %21:gr64, 0, implicit-def $eflags
1760B	  JCC_1 %bb.10, 4, implicit $eflags

1776B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1792B	  %23:gr64 = COPY %21:gr64
1808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1824B	  $rdi = COPY %23:gr64
1840B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1856B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1888B	  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1904B	  CMP64ri8 %24:gr64, 0, implicit-def $eflags
1920B	  JCC_1 %bb.12, 4, implicit $eflags

1936B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

1952B	  %26:gr64 = COPY %24:gr64
1968B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1984B	  $rdi = COPY %26:gr64
2000B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2032B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2048B	  %27:gr32 = MOV32r0 implicit-def $eflags
2064B	  $eax = COPY %27:gr32
2080B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %18:gr64 = MOV32ri64 4000000
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %18:gr64
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %19:gr64 = COPY $rax
128B	  %17:gr64 = COPY %19:gr64
144B	  %15:gr64 = COPY %17:gr64
160B	  %13:gr32 = MOV32r0 implicit-def $eflags
176B	  %14:gr64 = MOV32ri64 4000000
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = COPY %13:gr32
240B	  $rdx = COPY %14:gr64
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
304B	  %9:gr64 = MOV32ri64 4000
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %9:gr64
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %10:gr64 = COPY $rax
400B	  %8:gr64 = COPY %10:gr64
416B	  %6:gr64 = COPY %8:gr64
432B	  %4:gr32 = MOV32r0 implicit-def $eflags
448B	  %5:gr64 = MOV32ri64 4000
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = COPY %4:gr32
512B	  $rdx = COPY %5:gr64
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
736B	  %37:gr32 = COPY $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
896B	  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
912B	  %93:gr32 = MOV32ri 20
928B	  $eax = COPY %97:gr32
944B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
960B	  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
976B	  %94:gr32 = COPY $edx
992B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1008B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1024B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1040B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1056B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1072B	  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1088B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1104B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1120B	  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
1136B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1152B	  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
1168B	  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
1184B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1200B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1216B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1232B	  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
1248B	  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
1264B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1280B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1296B	  %46:gr64 = MOV64ri @.str
1312B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $rdi = COPY %46:gr64
1344B	  $esi = COPY %51:gr32
1360B	  $al = MOV8ri 0
1376B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  %48:gr32 = COPY $eax

1424B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1440B	  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1456B	  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
1472B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1488B	  JMP_1 %bb.3

1504B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1520B	  %40:gr64 = MOV64ri @.str.1
1536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  $rdi = COPY %40:gr64
1568B	  $al = MOV8ri 0
1584B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1600B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  %41:gr32 = COPY $eax

1632B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1648B	  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1664B	  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
1680B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1696B	  JMP_1 %bb.1

1712B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1728B	  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1744B	  CMP64ri8 %21:gr64, 0, implicit-def $eflags
1760B	  JCC_1 %bb.10, 4, implicit $eflags

1776B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1792B	  %23:gr64 = COPY %21:gr64
1808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1824B	  $rdi = COPY %23:gr64
1840B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1856B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1888B	  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1904B	  CMP64ri8 %24:gr64, 0, implicit-def $eflags
1920B	  JCC_1 %bb.12, 4, implicit $eflags

1936B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

1952B	  %26:gr64 = COPY %24:gr64
1968B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1984B	  $rdi = COPY %26:gr64
2000B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2032B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2048B	  %27:gr32 = MOV32r0 implicit-def $eflags
2064B	  $eax = COPY %27:gr32
2080B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  %17:gr64 = COPY %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %8:gr64 = COPY %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $esi = COPY %4:gr32
  $rdx = COPY %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %36:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %37:gr32 = COPY $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %93:gr32, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
  %94:gr32 = COPY $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm %81:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 %67:gr32
  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 %56:gr32
  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  $esi = COPY %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 %102:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 %45:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %27:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  %17:gr64 = COPY killed %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def dead $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %15:gr64
  $esi = COPY killed %13:gr32
  $rdx = COPY killed %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %8:gr64 = COPY killed %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def dead $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $esi = COPY killed %4:gr32
  $rdx = COPY killed %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY killed %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %37:gr32 = COPY killed $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm killed %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY killed %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %94:gr32 = COPY killed $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm killed %81:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm killed %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm killed %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %46:gr64
  $esi = COPY killed %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %48:gr32 = COPY killed $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 killed %102:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %41:gr32 = COPY killed $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 killed %45:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY killed %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY killed %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %27:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  %17:gr64 = COPY killed %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def dead $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %15:gr64
  $esi = COPY killed %13:gr32
  $rdx = COPY killed %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %8:gr64 = COPY killed %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def dead $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $esi = COPY killed %4:gr32
  $rdx = COPY killed %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY killed %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %37:gr32 = COPY killed $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm killed %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY killed %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %94:gr32 = COPY killed $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm killed %81:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm killed %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm killed %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %46:gr64
  $esi = COPY killed %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %48:gr32 = COPY killed $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 killed %102:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %41:gr32 = COPY killed $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 killed %45:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY killed %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY killed %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %27:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  %17:gr64 = COPY killed %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def dead $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %15:gr64
  $esi = COPY killed %13:gr32
  $rdx = COPY killed %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %8:gr64 = COPY killed %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def dead $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $esi = COPY killed %4:gr32
  $rdx = COPY killed %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY killed %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %37:gr32 = COPY killed $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm killed %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY killed %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %94:gr32 = COPY killed $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm killed %81:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm killed %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm killed %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %46:gr64
  $esi = COPY killed %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %48:gr32 = COPY killed $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 killed %102:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %41:gr32 = COPY killed $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 killed %45:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY killed %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY killed %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %27:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  %17:gr64 = COPY killed %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def dead $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %15:gr64
  $esi = COPY killed %13:gr32
  $rdx = COPY killed %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %8:gr64 = COPY killed %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def dead $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $esi = COPY killed %4:gr32
  $rdx = COPY killed %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY killed %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %37:gr32 = COPY killed $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = ADD32rm killed %98:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY killed %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %94:gr32 = COPY killed $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = IMUL32rm killed %81:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %67:gr32 = ADD32rm killed %69:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %56:gr32 = ADD32rm killed %58:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %46:gr64
  $esi = COPY killed %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %48:gr32 = COPY killed $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = ADD32ri8 killed %102:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %41:gr32 = COPY killed $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = ADD32ri8 killed %45:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY killed %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY killed %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %27:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  %17:gr64 = COPY killed %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def dead $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %15:gr64
  $esi = COPY killed %13:gr32
  $rdx = COPY killed %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %8:gr64 = COPY killed %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def dead $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $esi = COPY killed %4:gr32
  $rdx = COPY killed %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY killed %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %37:gr32 = COPY killed $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = COPY killed %98:gr32
  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY killed %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %94:gr32 = COPY killed $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = COPY killed %81:gr32
  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %67:gr32 = COPY killed %69:gr32
  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %56:gr32 = COPY killed %58:gr32
  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %46:gr64
  $esi = COPY killed %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %48:gr32 = COPY killed $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = COPY killed %102:gr32
  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %41:gr32 = COPY killed $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = COPY killed %45:gr32
  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY killed %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY killed %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %27:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %18:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %18:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  %17:gr64 = COPY killed %19:gr64
  %15:gr64 = COPY %17:gr64
  %13:gr32 = MOV32r0 implicit-def dead $eflags
  %14:gr64 = MOV32ri64 4000000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %15:gr64
  $esi = COPY killed %13:gr32
  $rdx = COPY killed %14:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
  %9:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %8:gr64 = COPY killed %10:gr64
  %6:gr64 = COPY %8:gr64
  %4:gr32 = MOV32r0 implicit-def dead $eflags
  %5:gr64 = MOV32ri64 4000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $esi = COPY killed %4:gr32
  $rdx = COPY killed %5:gr64
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %36:gr32 = MOV32ri 13
  $eax = COPY killed %38:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %37:gr32 = COPY killed $edx
  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %97:gr32 = COPY killed %98:gr32
  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %93:gr32 = MOV32ri 20
  $eax = COPY killed %97:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %94:gr32 = COPY killed $edx
  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %73:gr32 = COPY killed %81:gr32
  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %67:gr32 = COPY killed %69:gr32
  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  %56:gr32 = COPY killed %58:gr32
  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
  %46:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %46:gr64
  $esi = COPY killed %51:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %48:gr32 = COPY killed $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %101:gr32 = COPY killed %102:gr32
  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  %40:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %40:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %41:gr32 = COPY killed $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %44:gr32 = COPY killed %45:gr32
  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 %21:gr64, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10

  %23:gr64 = COPY killed %21:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 %24:gr64, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12

  %26:gr64 = COPY killed %24:gr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  %27:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %27:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %18:gr64 = MOV32ri64 4000000
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY killed %18:gr64
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %19:gr64 = COPY killed $rax
128B	  %17:gr64 = COPY killed %19:gr64
144B	  %15:gr64 = COPY %17:gr64
160B	  %13:gr32 = MOV32r0 implicit-def dead $eflags
176B	  %14:gr64 = MOV32ri64 4000000
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY killed %15:gr64
224B	  $esi = COPY killed %13:gr32
240B	  $rdx = COPY killed %14:gr64
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
304B	  %9:gr64 = MOV32ri64 4000
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY killed %9:gr64
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %10:gr64 = COPY killed $rax
400B	  %8:gr64 = COPY killed %10:gr64
416B	  %6:gr64 = COPY %8:gr64
432B	  %4:gr32 = MOV32r0 implicit-def dead $eflags
448B	  %5:gr64 = MOV32ri64 4000
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed %6:gr64
496B	  $esi = COPY killed %4:gr32
512B	  $rdx = COPY killed %5:gr64
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY killed %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
896B	  %97:gr32 = COPY killed %98:gr32
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY killed %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1136B	  %73:gr32 = COPY killed %81:gr32
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1200B	  %67:gr32 = COPY killed %69:gr32
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
1248B	  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1296B	  %56:gr32 = COPY killed %58:gr32
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
1344B	  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY killed %46:gr64
1408B	  $esi = COPY killed %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1520B	  %101:gr32 = COPY killed %102:gr32
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY killed %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1744B	  %44:gr32 = COPY killed %45:gr32
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %21:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1888B	  %23:gr64 = COPY killed %21:gr64
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY killed %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %24:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2048B	  %26:gr64 = COPY killed %24:gr64
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY killed %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2144B	  %27:gr32 = MOV32r0 implicit-def dead $eflags
2160B	  $eax = COPY killed %27:gr32
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %18:gr64 = MOV32ri64 4000000
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY killed %18:gr64
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %19:gr64 = COPY killed $rax
128B	  %17:gr64 = COPY killed %19:gr64
144B	  %15:gr64 = COPY %17:gr64
160B	  %13:gr32 = MOV32r0 implicit-def dead $eflags
176B	  %14:gr64 = MOV32ri64 4000000
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY killed %15:gr64
224B	  $esi = COPY killed %13:gr32
240B	  $rdx = COPY killed %14:gr64
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %17:gr64 :: (store (s64) into %ir.2)
304B	  %9:gr64 = MOV32ri64 4000
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY killed %9:gr64
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %10:gr64 = COPY killed $rax
400B	  %8:gr64 = COPY killed %10:gr64
416B	  %6:gr64 = COPY %8:gr64
432B	  %4:gr32 = MOV32r0 implicit-def dead $eflags
448B	  %5:gr64 = MOV32ri64 4000
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed %6:gr64
496B	  $esi = COPY killed %4:gr32
512B	  $rdx = COPY killed %5:gr64
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY killed %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r killed %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed %33:gr64, 4, killed %32:gr64_nosp, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
896B	  %97:gr32 = COPY killed %98:gr32
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY killed %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r killed %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed %90:gr64, 4, killed %89:gr64_nosp, 0, $noreg, killed %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %81:gr32 = MOV32rm killed %84:gr64, 4, killed %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1136B	  %73:gr32 = COPY killed %81:gr32
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), killed %78:gr64, 4, killed %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1200B	  %67:gr32 = COPY killed %69:gr32
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 killed %67:gr32
1248B	  MOV32mr killed %70:gr64, 4, killed %64:gr64_nosp, 0, $noreg, killed %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1296B	  %56:gr32 = COPY killed %58:gr32
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 killed %56:gr32
1344B	  %51:gr32 = MOV32rm killed %59:gr64, 4, killed %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY killed %46:gr64
1408B	  $esi = COPY killed %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1520B	  %101:gr32 = COPY killed %102:gr32
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY killed %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1744B	  %44:gr32 = COPY killed %45:gr32
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %21:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1888B	  %23:gr64 = COPY killed %21:gr64
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY killed %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %24:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2048B	  %26:gr64 = COPY killed %24:gr64
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY killed %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2144B	  %27:gr32 = MOV32r0 implicit-def dead $eflags
2160B	  $eax = COPY killed %27:gr32
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %18:gr64 = MOV32ri64 4000000
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %18:gr64
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %19:gr64 = COPY killed $rax
128B	  %17:gr64 = COPY %19:gr64
144B	  %15:gr64 = COPY %17:gr64
160B	  %13:gr32 = MOV32r0 implicit-def dead $eflags
176B	  %14:gr64 = MOV32ri64 4000000
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = COPY %13:gr32
240B	  $rdx = COPY %14:gr64
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
304B	  %9:gr64 = MOV32ri64 4000
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %9:gr64
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %10:gr64 = COPY killed $rax
400B	  %8:gr64 = COPY %10:gr64
416B	  %6:gr64 = COPY %8:gr64
432B	  %4:gr32 = MOV32r0 implicit-def dead $eflags
448B	  %5:gr64 = MOV32ri64 4000
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = COPY %4:gr32
512B	  $rdx = COPY %5:gr64
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
896B	  %97:gr32 = COPY %98:gr32
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1136B	  %73:gr32 = COPY %81:gr32
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1200B	  %67:gr32 = COPY %69:gr32
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1296B	  %56:gr32 = COPY %58:gr32
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1520B	  %101:gr32 = COPY %102:gr32
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1744B	  %44:gr32 = COPY %45:gr32
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %21:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1888B	  %23:gr64 = COPY %21:gr64
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %24:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2048B	  %26:gr64 = COPY %24:gr64
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2144B	  %27:gr32 = MOV32r0 implicit-def dead $eflags
2160B	  $eax = COPY %27:gr32
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %18:gr64 = MOV32ri64 4000000
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %18:gr64
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %19:gr64 = COPY killed $rax
128B	  %17:gr64 = COPY %19:gr64
144B	  %15:gr64 = COPY %17:gr64
160B	  %13:gr32 = MOV32r0 implicit-def dead $eflags
176B	  %14:gr64 = MOV32ri64 4000000
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = COPY %13:gr32
240B	  $rdx = COPY %14:gr64
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %17:gr64 :: (store (s64) into %ir.2)
304B	  %9:gr64 = MOV32ri64 4000
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %9:gr64
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %10:gr64 = COPY killed $rax
400B	  %8:gr64 = COPY %10:gr64
416B	  %6:gr64 = COPY %8:gr64
432B	  %4:gr32 = MOV32r0 implicit-def dead $eflags
448B	  %5:gr64 = MOV32ri64 4000
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = COPY %4:gr32
512B	  $rdx = COPY %5:gr64
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %98:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
896B	  %97:gr32 = COPY %98:gr32
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %81:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1136B	  %73:gr32 = COPY %81:gr32
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %69:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1200B	  %67:gr32 = COPY %69:gr32
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %58:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1296B	  %56:gr32 = COPY %58:gr32
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %102:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1520B	  %101:gr32 = COPY %102:gr32
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %45:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1744B	  %44:gr32 = COPY %45:gr32
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %21:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %21:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1888B	  %23:gr64 = COPY %21:gr64
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %24:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2048B	  %26:gr64 = COPY %24:gr64
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2144B	  %27:gr32 = MOV32r0 implicit-def dead $eflags
2160B	  $eax = COPY %27:gr32
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY killed $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY killed $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
736B	  %37:gr32 = COPY killed $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
992B	  %94:gr32 = COPY killed $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY killed $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY killed $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
736B	  %37:gr32 = COPY $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
992B	  %94:gr32 = COPY $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
736B	  %37:gr32 = COPY $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
992B	  %94:gr32 = COPY $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
736B	  %37:gr32 = COPY $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
992B	  %94:gr32 = COPY $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %15:gr64 = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %15:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %15:gr64 :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %6:gr64 = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %6:gr64
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6:gr64 :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  %36:gr32 = MOV32ri 13
688B	  $eax = COPY %38:gr32
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r %36:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
736B	  %37:gr32 = COPY $edx
752B	  %33:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  %32:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr %33:gr64, 4, %32:gr64_nosp, 0, $noreg, %37:gr32 :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  %97:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  %97:gr32 = ADD32rm %97:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  %93:gr32 = MOV32ri 20
944B	  $eax = COPY %97:gr32
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r %93:gr32, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
992B	  %94:gr32 = COPY $edx
1008B	  %90:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  %89:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr %90:gr64, 4, %89:gr64_nosp, 0, $noreg, %94:gr32 :: (store (s32) into %ir.33)
1056B	  %84:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  %83:gr64_nosp = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  %73:gr32 = MOV32rm %84:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load (s32) from %ir.37)
1104B	  %78:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  %77:gr64_nosp = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  %73:gr32 = IMUL32rm %73:gr32(tied-def 0), %78:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  %70:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  %67:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  %67:gr32 = ADD32rm %67:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  %64:gr64_nosp = MOVSX64rr32 %67:gr32
1248B	  MOV32mr %70:gr64, 4, %64:gr64_nosp, 0, $noreg, %73:gr32 :: (store (s32) into %ir.51)
1264B	  %59:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  %56:gr32 = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  %56:gr32 = ADD32rm %56:gr32(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  %53:gr64_nosp = MOVSX64rr32 %56:gr32
1344B	  %51:gr32 = MOV32rm %59:gr64, 4, %53:gr64_nosp, 0, $noreg :: (load (s32) from %ir.58)
1360B	  %46:gr64 = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %46:gr64
1408B	  $esi = COPY %51:gr32
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  dead %48:gr32 = COPY $eax

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  %101:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  %101:gr32 = ADD32ri8 %101:gr32(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %101:gr32 :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  %40:gr64 = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  $rdi = COPY %40:gr64
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  dead %41:gr32 = COPY $eax

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %44:gr32 :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 %23:gr64, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10

1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1920B	  $rdi = COPY %23:gr64
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 %26:gr64, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12

2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  $rdi = COPY %26:gr64
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rbx = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY renamable $rbx
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  renamable $rbx = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY renamable $rbx
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  renamable $ecx = MOV32ri 13
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
752B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  renamable $ecx = MOV32ri 20
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
1008B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
1056B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
1104B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  renamable $rdx = MOVSX64rr32 killed renamable $edx
1248B	  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
1264B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  renamable $rcx = MOVSX64rr32 killed renamable $ecx
1344B	  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
1360B	  renamable $rdi = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  renamable $rdi = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10
	  liveins: $rdi
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12
	  liveins: $rdi
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rbx = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY renamable $rbx
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  renamable $rbx = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY renamable $rbx
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  renamable $ecx = MOV32ri 13
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
752B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  renamable $ecx = MOV32ri 20
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
1008B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
1056B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
1104B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  renamable $rdx = MOVSX64rr32 killed renamable $edx
1248B	  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
1264B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  renamable $rcx = MOVSX64rr32 killed renamable $ecx
1344B	  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
1360B	  renamable $rdi = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  renamable $rdi = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10
	  liveins: $rdi
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12
	  liveins: $rdi
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rbx = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY renamable $rbx
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  renamable $rbx = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY renamable $rbx
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  renamable $ecx = MOV32ri 13
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
752B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  renamable $ecx = MOV32ri 20
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
1008B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
1056B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
1104B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  renamable $rdx = MOVSX64rr32 killed renamable $edx
1248B	  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
1264B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  renamable $rcx = MOVSX64rr32 killed renamable $ecx
1344B	  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
1360B	  renamable $rdi = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  renamable $rdi = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10
	  liveins: $rdi
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12
	  liveins: $rdi
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rbx = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY renamable $rbx
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  renamable $rbx = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY renamable $rbx
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  renamable $ecx = MOV32ri 13
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
752B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  renamable $ecx = MOV32ri 20
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
1008B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
1056B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
1104B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  renamable $rdx = MOVSX64rr32 killed renamable $edx
1248B	  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
1264B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  renamable $rcx = MOVSX64rr32 killed renamable $ecx
1344B	  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
1360B	  renamable $rdi = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  renamable $rdi = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10
	  liveins: $rdi
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12
	  liveins: $rdi
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rbx = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY renamable $rbx
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  renamable $rbx = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY renamable $rbx
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  renamable $ecx = MOV32ri 13
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
752B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  renamable $ecx = MOV32ri 20
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
1008B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
1056B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
1104B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  renamable $rdx = MOVSX64rr32 killed renamable $edx
1248B	  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
1264B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  renamable $rcx = MOVSX64rr32 killed renamable $ecx
1344B	  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
1360B	  renamable $rdi = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  renamable $rdi = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10
	  liveins: $rdi
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12
	  liveins: $rdi
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = MOV32ri64 4000000
80B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rbx = COPY $rax
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY renamable $rbx
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $rdx = MOV32ri64 4000000
256B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = MOV32ri64 4000
352B	  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  renamable $rbx = COPY $rax
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY renamable $rbx
496B	  $esi = MOV32r0 implicit-def dead $eflags
512B	  $rdx = MOV32ri64 4000
528B	  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
576B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

592B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

608B	  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
624B	  JCC_1 %bb.8, 13, implicit killed $eflags

640B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

656B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
672B	  renamable $ecx = MOV32ri 13
704B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
720B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
752B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
768B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
800B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

816B	bb.3 (%ir-block.22):
	; predecessors: %bb.2, %bb.5
	  successors: %bb.6, %bb.4

832B	  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
848B	  JCC_1 %bb.6, 13, implicit killed $eflags

864B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5

880B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
912B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
928B	  renamable $ecx = MOV32ri 20
960B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
976B	  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
1008B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1024B	  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1040B	  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
1056B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1072B	  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1088B	  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
1104B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1120B	  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1152B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
1168B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1184B	  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1216B	  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1232B	  renamable $rdx = MOVSX64rr32 killed renamable $edx
1248B	  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
1264B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1280B	  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
1312B	  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
1328B	  renamable $rcx = MOVSX64rr32 killed renamable $ecx
1344B	  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
1360B	  renamable $rdi = MOV64ri @.str
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1424B	  $al = MOV8ri 0
1440B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1488B	bb.5 (%ir-block.61):
	; predecessors: %bb.4
	  successors: %bb.3

1504B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1536B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1552B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
1568B	  JMP_1 %bb.3

1584B	bb.6 (%ir-block.64):
	; predecessors: %bb.3
	  successors: %bb.7

1600B	  renamable $rdi = MOV64ri @.str.1
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1648B	  $al = MOV8ri 0
1664B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1712B	bb.7 (%ir-block.66):
	; predecessors: %bb.6
	  successors: %bb.1

1728B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1760B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1776B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1792B	  JMP_1 %bb.1

1808B	bb.8 (%ir-block.69):
	; predecessors: %bb.1
	  successors: %bb.10, %bb.9

1824B	  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
1840B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
1856B	  JCC_1 %bb.10, 4, implicit killed $eflags

1872B	bb.9 (%ir-block.72):
	; predecessors: %bb.8
	  successors: %bb.10
	  liveins: $rdi
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1936B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
1952B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1968B	bb.10 (%ir-block.74):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.12, %bb.11

1984B	  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
2000B	  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
2016B	  JCC_1 %bb.12, 4, implicit killed $eflags

2032B	bb.11 (%ir-block.77):
	; predecessors: %bb.10
	  successors: %bb.12
	  liveins: $rdi
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2096B	  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
2112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

2128B	bb.12 (%ir-block.79):
	; predecessors: %bb.10, %bb.11

2160B	  $eax = MOV32r0 implicit-def dead $eflags
2176B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi %stack.4, 1, $noreg, 0, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi %stack.3, 1, $noreg, 0, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), %stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $rdi = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $rdi = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  renamable $rbx = COPY $rax
  $rdi = COPY renamable $rbx
  $esi = MOV32r0 implicit-def dead $eflags
  $rdx = MOV32ri64 4000
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=4, align=4, at location [SP-20]
  fi#4: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 0 :: (store (s32) into %ir.1)
  $edi = MOV32ri 4000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rbx :: (store (s64) into %ir.2)
  $edi = MOV32ri 4000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @_Znam, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
  $rbx = MOV64rr $rax
  $rdi = MOV64rr $rbx
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  $edx = MOV32ri 4000, implicit-def $rdx
  CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx :: (store (s64) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $ecx = MOV32ri 13
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.21)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.5)

bb.3 (%ir-block.22):
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  CMP32mi $rbp, 1, $noreg, -16, $noreg, 1000, implicit-def $eflags :: (load (s32) from %ir.5)
  JCC_1 %bb.6, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $ecx = MOV32ri 20
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  MOV32mr killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, killed renamable $edx :: (store (s32) into %ir.33)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.37)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $rdx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.42)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $edx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $edx = ADD32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rdx = MOVSX64rr32 killed renamable $edx
  MOV32mr killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.51)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  renamable $ecx = IMUL32rmi $rbp, 1, $noreg, -12, $noreg, 1000, implicit-def dead $eflags :: (load (s32) from %ir.4)
  renamable $ecx = ADD32rm killed renamable $ecx(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.5)
  renamable $rcx = MOVSX64rr32 killed renamable $ecx
  renamable $esi = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.58)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.5 (%ir-block.61):
; predecessors: %bb.4
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  JMP_1 %bb.3

bb.6 (%ir-block.64):
; predecessors: %bb.3
  successors: %bb.7

  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.7 (%ir-block.66):
; predecessors: %bb.6
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8 (%ir-block.69):
; predecessors: %bb.1
  successors: %bb.10, %bb.9

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.2)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags

bb.9 (%ir-block.72):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.10 (%ir-block.74):
; predecessors: %bb.8, %bb.9
  successors: %bb.12, %bb.11

  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.3)
  CMP64ri8 renamable $rdi, 0, implicit-def $eflags
  JCC_1 %bb.12, 4, implicit killed $eflags

bb.11 (%ir-block.77):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rdi
  CALL64pcrel32 target-flags(x86-plt) @_ZdaPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

bb.12 (%ir-block.79):
; predecessors: %bb.10, %bb.11

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 40, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

